// Generated by gencpp from file service_pkg/VectorMagnitudeResponse.msg
// DO NOT EDIT!


#ifndef SERVICE_PKG_MESSAGE_VECTORMAGNITUDERESPONSE_H
#define SERVICE_PKG_MESSAGE_VECTORMAGNITUDERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace service_pkg
{
template <class ContainerAllocator>
struct VectorMagnitudeResponse_
{
  typedef VectorMagnitudeResponse_<ContainerAllocator> Type;

  VectorMagnitudeResponse_()
    : magnitude(0.0)  {
    }
  VectorMagnitudeResponse_(const ContainerAllocator& _alloc)
    : magnitude(0.0)  {
  (void)_alloc;
    }



   typedef double _magnitude_type;
  _magnitude_type magnitude;





  typedef boost::shared_ptr< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VectorMagnitudeResponse_

typedef ::service_pkg::VectorMagnitudeResponse_<std::allocator<void> > VectorMagnitudeResponse;

typedef boost::shared_ptr< ::service_pkg::VectorMagnitudeResponse > VectorMagnitudeResponsePtr;
typedef boost::shared_ptr< ::service_pkg::VectorMagnitudeResponse const> VectorMagnitudeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator1> & lhs, const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.magnitude == rhs.magnitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator1> & lhs, const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace service_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f3a902f9783110e2b8fe7c475e26788e";
  }

  static const char* value(const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf3a902f9783110e2ULL;
  static const uint64_t static_value2 = 0xb8fe7c475e26788eULL;
};

template<class ContainerAllocator>
struct DataType< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "service_pkg/VectorMagnitudeResponse";
  }

  static const char* value(const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 magnitude\n"
;
  }

  static const char* value(const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.magnitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VectorMagnitudeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::service_pkg::VectorMagnitudeResponse_<ContainerAllocator>& v)
  {
    s << indent << "magnitude: ";
    Printer<double>::stream(s, indent + "  ", v.magnitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERVICE_PKG_MESSAGE_VECTORMAGNITUDERESPONSE_H
